{"ast":null,"code":"const useHttp = (type, //\"POST\" or \"GET\"\nurl, // \"https://custom-hooks-e260f-default-rtdb.firebaseio.com/tasks.json\"\nsetIsLoading, setError, setTasks, //only \"GET\"\ntaskText, //only \"POST\"\nonAddTask //only \"POST\"\n) => {\n  const runRequest = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      let response;\n\n      if (type === \"GET\") {\n        response = await fetch(url);\n      } else if (type === \"POST\") {\n        response = await fetch(url, {\n          method: \"POST\",\n          body: JSON.stringify({\n            text: taskText\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      } else {\n        throw new Error(\"Inappropriate request!\");\n      }\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n\n      if (type === \"POST\") {\n        const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n\n        const createdTask = {\n          id: generatedId,\n          text: taskText\n        };\n        onAddTask(createdTask);\n      } else if (type === \"GET\") {\n        const loadedTasks = [];\n\n        for (const taskKey in data) {\n          loadedTasks.push({\n            id: taskKey,\n            text: data[taskKey].text\n          });\n        }\n\n        setTasks(loadedTasks);\n      }\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return runRequest;\n};\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/avuzikov/React/04-onwards-to-a-more-realistic-example/src/hooks/use-http.js"],"names":["useHttp","type","url","setIsLoading","setError","setTasks","taskText","onAddTask","runRequest","response","fetch","method","body","JSON","stringify","text","headers","Error","ok","data","json","generatedId","name","createdTask","id","loadedTasks","taskKey","push","err","message"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CACdC,IADc,EACR;AACNC,GAFc,EAET;AACLC,YAHc,EAIdC,QAJc,EAKdC,QALc,EAKJ;AACVC,QANc,EAMJ;AACVC,SAPc,CAOJ;AAPI,KAQX;AACH,QAAMC,UAAU,GAAG,YAAY;AAC7BL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAC,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,UAAIK,QAAJ;;AACA,UAAIR,IAAI,KAAK,KAAb,EAAoB;AAClBQ,QAAAA,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,CAAtB;AACD,OAFD,MAEO,IAAID,IAAI,KAAK,MAAb,EAAqB;AAC1BQ,QAAAA,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAM;AAC1BS,UAAAA,MAAM,EAAE,MADkB;AAE1BC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,YAAAA,IAAI,EAAET;AAAR,WAAf,CAFoB;AAG1BU,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT;AAHiB,SAAN,CAAtB;AAOD,OARM,MAQA;AACL,cAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,UAAI,CAACR,QAAQ,CAACS,EAAd,EAAkB;AAChB,cAAM,IAAID,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,YAAME,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;;AACA,UAAInB,IAAI,KAAK,MAAb,EAAqB;AACnB,cAAMoB,WAAW,GAAGF,IAAI,CAACG,IAAzB,CADmB,CACY;;AAC/B,cAAMC,WAAW,GAAG;AAAEC,UAAAA,EAAE,EAAEH,WAAN;AAAmBN,UAAAA,IAAI,EAAET;AAAzB,SAApB;AAEAC,QAAAA,SAAS,CAACgB,WAAD,CAAT;AACD,OALD,MAKO,IAAItB,IAAI,KAAK,KAAb,EAAoB;AACzB,cAAMwB,WAAW,GAAG,EAApB;;AAEA,aAAK,MAAMC,OAAX,IAAsBP,IAAtB,EAA4B;AAC1BM,UAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEH,YAAAA,EAAE,EAAEE,OAAN;AAAeX,YAAAA,IAAI,EAAEI,IAAI,CAACO,OAAD,CAAJ,CAAcX;AAAnC,WAAjB;AACD;;AAEDV,QAAAA,QAAQ,CAACoB,WAAD,CAAR;AACD;AACF,KAjCD,CAiCE,OAAOG,GAAP,EAAY;AACZxB,MAAAA,QAAQ,CAACwB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACD1B,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAxCD;;AAyCA,SAAOK,UAAP;AACD,CAnDD;;AAqDA,eAAeR,OAAf","sourcesContent":["const useHttp = (\r\n  type, //\"POST\" or \"GET\"\r\n  url, // \"https://custom-hooks-e260f-default-rtdb.firebaseio.com/tasks.json\"\r\n  setIsLoading,\r\n  setError,\r\n  setTasks, //only \"GET\"\r\n  taskText, //only \"POST\"\r\n  onAddTask //only \"POST\"\r\n) => {\r\n  const runRequest = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      let response;\r\n      if (type === \"GET\") {\r\n        response = await fetch(url);\r\n      } else if (type === \"POST\") {\r\n        response = await fetch(url, {\r\n          method: \"POST\",\r\n          body: JSON.stringify({ text: taskText }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n      } else {\r\n        throw new Error(\"Inappropriate request!\");\r\n      }\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n      const data = await response.json();\r\n      if (type === \"POST\") {\r\n        const generatedId = data.name; // firebase-specific => \"name\" contains generated id\r\n        const createdTask = { id: generatedId, text: taskText };\r\n\r\n        onAddTask(createdTask);\r\n      } else if (type === \"GET\") {\r\n        const loadedTasks = [];\r\n\r\n        for (const taskKey in data) {\r\n          loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n        }\r\n\r\n        setTasks(loadedTasks);\r\n      }\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n  return runRequest;\r\n};\r\n\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}
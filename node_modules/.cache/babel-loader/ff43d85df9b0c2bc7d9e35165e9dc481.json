{"ast":null,"code":"import React, { useState } from \"react\";\n\nconst useHttp = async (type, url, setIsLoading, setError, setTasks, taskText = \"\") => {\n  setIsLoading(true);\n  setError(null);\n\n  try {\n    let response;\n\n    if (type === \"GET\") {\n      response = await fetch(url);\n    } else if (type === \"POST\") {\n      response = await fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          text: taskText\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    } else {\n      throw new Error(\"Inappropriate request!\");\n    }\n\n    if (!response.ok) {\n      throw new Error(\"Request failed!\");\n    }\n\n    const data = await response.json();\n\n    if (type === \"POST\") {\n      const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n\n      const createdTask = {\n        id: generatedId,\n        text: taskText\n      };\n      props.onAddTask(createdTask);\n    } else if (type === \"GET\") {\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          text: data[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    }\n  } catch (err) {\n    setError(err.message || \"Something went wrong!\");\n  }\n\n  setIsLoading(false);\n};\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/avuzikov/React/04-onwards-to-a-more-realistic-example/src/hooks/use-http.js"],"names":["React","useState","useHttp","type","url","setIsLoading","setError","setTasks","taskText","response","fetch","method","body","JSON","stringify","text","headers","Error","ok","data","json","generatedId","name","createdTask","id","props","onAddTask","loadedTasks","taskKey","push","err","message"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,OAAO,GAAG,OACdC,IADc,EAEdC,GAFc,EAGdC,YAHc,EAIdC,QAJc,EAKdC,QALc,EAMdC,QAAQ,GAAG,EANG,KAOX;AACHH,EAAAA,YAAY,CAAC,IAAD,CAAZ;AACAC,EAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,MAAI;AACF,QAAIG,QAAJ;;AACA,QAAIN,IAAI,KAAK,KAAb,EAAoB;AAClBM,MAAAA,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAD,CAAtB;AACD,KAFD,MAEO,IAAID,IAAI,KAAK,MAAb,EAAqB;AAC1BM,MAAAA,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAD,EAAM;AAC1BO,QAAAA,MAAM,EAAE,MADkB;AAE1BC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,UAAAA,IAAI,EAAEP;AAAR,SAAf,CAFoB;AAG1BQ,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHiB,OAAN,CAAtB;AAOD,KARM,MAQA;AACL,YAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,QAAI,CAACR,QAAQ,CAACS,EAAd,EAAkB;AAChB,YAAM,IAAID,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,UAAME,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;;AACA,QAAIjB,IAAI,KAAK,MAAb,EAAqB;AACnB,YAAMkB,WAAW,GAAGF,IAAI,CAACG,IAAzB,CADmB,CACY;;AAC/B,YAAMC,WAAW,GAAG;AAAEC,QAAAA,EAAE,EAAEH,WAAN;AAAmBN,QAAAA,IAAI,EAAEP;AAAzB,OAApB;AAEAiB,MAAAA,KAAK,CAACC,SAAN,CAAgBH,WAAhB;AACD,KALD,MAKO,IAAIpB,IAAI,KAAK,KAAb,EAAoB;AACzB,YAAMwB,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,OAAX,IAAsBT,IAAtB,EAA4B;AAC1BQ,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEL,UAAAA,EAAE,EAAEI,OAAN;AAAeb,UAAAA,IAAI,EAAEI,IAAI,CAACS,OAAD,CAAJ,CAAcb;AAAnC,SAAjB;AACD;;AAEDR,MAAAA,QAAQ,CAACoB,WAAD,CAAR;AACD;AACF,GAjCD,CAiCE,OAAOG,GAAP,EAAY;AACZxB,IAAAA,QAAQ,CAACwB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACD1B,EAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,CA/CD;;AAiDA,eAAeH,OAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst useHttp = async (\r\n  type,\r\n  url,\r\n  setIsLoading,\r\n  setError,\r\n  setTasks,\r\n  taskText = \"\"\r\n) => {\r\n  setIsLoading(true);\r\n  setError(null);\r\n  try {\r\n    let response;\r\n    if (type === \"GET\") {\r\n      response = await fetch(url);\r\n    } else if (type === \"POST\") {\r\n      response = await fetch(url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ text: taskText }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(\"Inappropriate request!\");\r\n    }\r\n    if (!response.ok) {\r\n      throw new Error(\"Request failed!\");\r\n    }\r\n    const data = await response.json();\r\n    if (type === \"POST\") {\r\n      const generatedId = data.name; // firebase-specific => \"name\" contains generated id\r\n      const createdTask = { id: generatedId, text: taskText };\r\n\r\n      props.onAddTask(createdTask);\r\n    } else if (type === \"GET\") {\r\n      const loadedTasks = [];\r\n\r\n      for (const taskKey in data) {\r\n        loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n      }\r\n\r\n      setTasks(loadedTasks);\r\n    }\r\n  } catch (err) {\r\n    setError(err.message || \"Something went wrong!\");\r\n  }\r\n  setIsLoading(false);\r\n};\r\n\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}